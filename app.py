import pandas as pd
import streamlit as st

from components.sidebar import render_sidebar
from utils import apply_css
from components.charts import (plot_stars, plot_forks, plot_issues_pie, plot_scatter, 
                              plot_correlation_heatmap, plot_trend_analysis, 
                              plot_statistical_insights, plot_framework_ranking, 
                              plot_outliers_analysis)
from services.github_api import get_frameworks_data
from services.processing import (clean_and_cast, add_metrics, describe_stats, group_by_license,
                               correlation_analysis, trend_analysis, statistical_insights, 
                               framework_comparison_analysis)
from services.exporting import build_html_report


# --- ·ª®ng d·ª•ng ---

# --- Giao di·ªán ·ª©ng d·ª•ng Streamlit ---
st.set_page_config(page_title="So s√°nh Framework JS", layout="wide")

# Apply CSS styling
apply_css()

# Ti√™u ƒë·ªÅ
st.markdown(
    """
    <div class="hero">
      <h1>üìä Ph√¢n t√≠ch ƒë·ªô ph·ªï bi·∫øn Framework JavaScript</h1>
      <p>S·ª≠ d·ª•ng d·ªØ li·ªáu tr·ª±c ti·∫øp t·ª´ GitHub ƒë·ªÉ so s√°nh React, Vue v√† Angular.</p>
    </div>
    """,
    unsafe_allow_html=True,
)

# Danh s√°ch c√°c framework v√† repository ch√≠nh th·ª©c c·ªßa ch√∫ng
frameworks = {
    'React': 'facebook/react',
    'Vue': 'vuejs/core',
    'Angular': 'angular/angular'
}

# --- B·ªô l·ªçc/thi·∫øt l·∫≠p giao di·ªán ---
selected_frameworks, chart_type, show_watchers, show_issues = render_sidebar(frameworks)

# L·∫•y d·ªØ li·ªáu
data = get_frameworks_data(frameworks, selected_frameworks)

if not data:
    st.warning("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ GitHub. Vui l√≤ng th·ª≠ l·∫°i sau.")
else:
    # DataFrame + x·ª≠ l√Ω
    df = pd.DataFrame(data)
    df = clean_and_cast(df)
    df = add_metrics(df)

    # Tabs layout
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        'T·ªïng quan', 'Ch·ªâ s·ªë nhanh', 'Nh√≥m & Th·ªëng k√™', 'Bi·ªÉu ƒë·ªì', 'Ph√¢n t√≠ch n√¢ng cao', 'Xu·∫•t & M√¥ t·∫£'
    ])

    with tab1:
        st.subheader('T·ªïng quan d·ªØ li·ªáu')
        highlight_cols = ['Stars', 'Forks'] + (['Open Issues'] if show_issues else [])
        st.dataframe(
            df[
                ['Framework', 'Repo', 'License', 'Size (KB)', 'Created At', 'Updated At', 'Pushed At', 'Stars', 'Forks']
                + (['Watchers'] if show_watchers else [])
                + (['Open Issues'] if show_issues else [])
                + ['Stars/Day (∆∞·ªõc t√≠nh)', 'Stars/Fork', 'T·ªâ l·ªá Issues/Stars', 'Tu·ªïi repo (nƒÉm)']
            ].style.highlight_max(axis=0, subset=highlight_cols, color='lightgreen')
        )

    with tab2:
        st.subheader('Ch·ªâ s·ªë nhanh')
        kpi1, kpi2, kpi3 = st.columns(3)
        with kpi1:
            st.metric('T·ªïng Stars', int(df['Stars'].sum()))
        with kpi2:
            st.metric('T·ªïng Forks', int(df['Forks'].sum()))
        with kpi3:
            st.metric('Tu·ªïi repo trung b√¨nh (nƒÉm)', float(df['Tu·ªïi repo (nƒÉm)'].mean().round(2)))

    with tab3:
        st.subheader('Nh√≥m theo License (n·∫øu c√≥)')
        grouped = group_by_license(df, include_watchers=show_watchers, include_issues=show_issues)
        st.dataframe(grouped)
        st.subheader('Th·ªëng k√™ m√¥ t·∫£')
        stats = describe_stats(df, include_watchers=show_watchers, include_issues=show_issues)
        st.dataframe(stats)

    with tab4:
        st.subheader('Bi·ªÉu ƒë·ªì so s√°nh')
        col1, col2 = st.columns(2)
        with col1:
            plot_stars(df, chart_type)
        with col2:
            plot_forks(df, chart_type)
        if show_issues:
            st.subheader('T·ª∑ l·ªá c√°c v·∫•n ƒë·ªÅ ƒëang m·ªü (Open Issues)')
            plot_issues_pie(df)
        st.subheader('Quan h·ªá Stars v√† Forks')
        plot_scatter(df, show_issues)

    with tab5:
        st.subheader('Ph√¢n t√≠ch n√¢ng cao')
        
        # Correlation Analysis
        st.subheader('üîó Ph√¢n t√≠ch t∆∞∆°ng quan')
        corr_matrix = correlation_analysis(df)
        plot_correlation_heatmap(corr_matrix)
        
        # Trend Analysis
        st.subheader('üìà Ph√¢n t√≠ch xu h∆∞·ªõng')
        trend_data = trend_analysis(df)
        plot_trend_analysis(trend_data, df)
        
        # Display trend results
        if trend_data:
            st.subheader('K·∫øt qu·∫£ ph√¢n t√≠ch xu h∆∞·ªõng')
            for analysis, result in trend_data.items():
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric(f"T∆∞∆°ng quan ({analysis})", f"{result['correlation']}")
                with col2:
                    st.metric("P-value", f"{result['p_value']}")
                with col3:
                    st.metric("√ù nghƒ©a th·ªëng k√™", result['significance'])
        
        # Statistical Insights
        st.subheader('üìä Insights th·ªëng k√™')
        insights = statistical_insights(df)
        plot_statistical_insights(insights, df)
        
        # Framework Comparison
        st.subheader('üèÜ So s√°nh Framework')
        comparison_df = framework_comparison_analysis(df)
        st.dataframe(comparison_df, use_container_width=True)
        plot_framework_ranking(comparison_df)
        
        # Outliers Analysis
        plot_outliers_analysis(insights, df)

    with tab6:
        st.subheader('Xu·∫•t k·∫øt qu·∫£')
        export_col1, export_col2 = st.columns(2)
        with export_col1:
            csv_bytes = df.to_csv(index=False).encode('utf-8')
            st.download_button('T·∫£i CSV d·ªØ li·ªáu', data=csv_bytes, file_name='frameworks_summary.csv', mime='text/csv')
        with export_col2:
            report_bytes = build_html_report(df, stats, grouped)
            st.download_button('T·∫£i b√°o c√°o HTML', data=report_bytes, file_name='report.html', mime='text/html')
        st.subheader('M√¥ t·∫£ t·ª´ GitHub')
        for _, row in df.iterrows():
            st.markdown(f"**{row['Framework']}**: *{row['Description']}*")