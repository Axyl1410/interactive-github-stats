import pandas as pd
import streamlit as st

from components.sidebar import render_sidebar
from components.charts import plot_stars, plot_forks, plot_issues_pie, plot_scatter
from services.github_api import get_frameworks_data
from services.processing import clean_and_cast, add_metrics, describe_stats, group_by_license
from services.exporting import build_html_report


# --- ·ª®ng d·ª•ng ---

# --- Giao di·ªán ·ª©ng d·ª•ng Streamlit ---
st.set_page_config(page_title="So s√°nh Framework JS", layout="wide")

# Ti√™u ƒë·ªÅ
st.title('üìä Ph√¢n t√≠ch ƒë·ªô ph·ªï bi·∫øn Framework JavaScript tr√™n GitHub')
st.markdown("""
·ª®ng d·ª•ng n√†y s·ª≠ d·ª•ng d·ªØ li·ªáu tr·ª±c ti·∫øp t·ª´ GitHub API ƒë·ªÉ so s√°nh ƒë·ªô ph·ªï bi·∫øn
c·ªßa ba framework JavaScript h√†ng ƒë·∫ßu: **React, Vue, v√† Angular**.
""")

# Danh s√°ch c√°c framework v√† repository ch√≠nh th·ª©c c·ªßa ch√∫ng
frameworks = {
    'React': 'facebook/react',
    'Vue': 'vuejs/core',
    'Angular': 'angular/angular'
}

# --- B·ªô l·ªçc/thi·∫øt l·∫≠p giao di·ªán ---
selected_frameworks, chart_type, show_watchers, show_issues = render_sidebar(frameworks)

# L·∫•y d·ªØ li·ªáu
data = get_frameworks_data(frameworks, selected_frameworks)

if not data:
    st.warning("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ GitHub. Vui l√≤ng th·ª≠ l·∫°i sau.")
else:
    # DataFrame + x·ª≠ l√Ω
    df = pd.DataFrame(data)
    df = clean_and_cast(df)
    df = add_metrics(df)

    # --- Hi·ªÉn th·ªã d·ªØ li·ªáu ---
    st.subheader('T·ªïng quan d·ªØ li·ªáu')
    highlight_cols = ['Stars', 'Forks'] + (['Open Issues'] if show_issues else [])
    st.dataframe(
        df[
            ['Framework', 'Repo', 'License', 'Size (KB)', 'Created At', 'Updated At', 'Pushed At', 'Stars', 'Forks']
            + (['Watchers'] if show_watchers else [])
            + (['Open Issues'] if show_issues else [])
            + ['Stars/Day (∆∞·ªõc t√≠nh)', 'Stars/Fork', 'T·ªâ l·ªá Issues/Stars', 'Tu·ªïi repo (nƒÉm)']
        ].style.highlight_max(axis=0, subset=highlight_cols, color='lightgreen')
    )

    # Statistics / Grouping
    st.subheader('Th·ªëng k√™ m√¥ t·∫£')
    stats = describe_stats(df, include_watchers=show_watchers, include_issues=show_issues)
    st.dataframe(stats)

    # KPIs nhanh
    st.subheader('Ch·ªâ s·ªë nhanh')
    kpi1, kpi2, kpi3 = st.columns(3)
    with kpi1:
        st.metric('T·ªïng Stars', int(df['Stars'].sum()))
    with kpi2:
        st.metric('T·ªïng Forks', int(df['Forks'].sum()))
    with kpi3:
        st.metric('Tu·ªïi repo trung b√¨nh (nƒÉm)', float(df['Tu·ªïi repo (nƒÉm)'].mean().round(2)))

    # Nh√≥m v√† t·ªïng h·ª£p
    st.subheader('Nh√≥m theo License (n·∫øu c√≥)')
    grouped = group_by_license(df, include_watchers=show_watchers, include_issues=show_issues)
    st.dataframe(grouped)

    # --- Tr·ª±c quan h√≥a d·ªØ li·ªáu ---
    st.subheader('Bi·ªÉu ƒë·ªì so s√°nh')

    col1, col2 = st.columns(2)

    with col1:
        plot_stars(df, chart_type)

    with col2:
        plot_forks(df, chart_type)

    # Bi·ªÉu ƒë·ªì tr√≤n th·ªÉ hi·ªán t·ª∑ l·ªá Open Issues
    if show_issues:
        st.subheader('T·ª∑ l·ªá c√°c v·∫•n ƒë·ªÅ ƒëang m·ªü (Open Issues)')
        plot_issues_pie(df)

    # Bi·ªÉu ƒë·ªì scatter: Stars vs Forks
    st.subheader('Quan h·ªá Stars v√† Forks')
    plot_scatter(df, show_issues)

    # Xu·∫•t k·∫øt qu·∫£
    st.subheader('Xu·∫•t k·∫øt qu·∫£')
    export_col1, export_col2 = st.columns(2)
    with export_col1:
        csv_bytes = df.to_csv(index=False).encode('utf-8')
        st.download_button('T·∫£i CSV d·ªØ li·ªáu', data=csv_bytes, file_name='frameworks_summary.csv', mime='text/csv')
    with export_col2:
        report_bytes = build_html_report(df, stats, grouped)
        st.download_button('T·∫£i b√°o c√°o HTML', data=report_bytes, file_name='report.html', mime='text/html')

    # Hi·ªÉn th·ªã m√¥ t·∫£ c·ªßa t·ª´ng framework
    st.subheader('M√¥ t·∫£ t·ª´ GitHub')
    for _, row in df.iterrows():
        st.markdown(f"**{row['Framework']}**: *{row['Description']}*")